<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
           http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
    
    <import resource="classpath:META-INF/cxf/cxf.xml" />  
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />  
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 
    <import resource="classpath:META-INF/cxf/cxf-extension-object-binding.xml" />
         
    <!-- Rest ws --> 
    
    <!-- TODO 根据各自的业务系统注入 权限Bean p:us-ref="userService"  p:ps-ref="personService" p:os-ref="organizationService" -->
    <bean id="securityRestWs" class="cn.safetys.cxf.ws.rest.impl.SecurityWsImpl">
	</bean>
       
    
    <!-- Cxf 的json解析引擎  jettison-1.3.jar -->
    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.JSONProvider">
    	<!-- 定制参数 -->
    	
    	<!-- dropRootElement 默认为false 则Json格式会将类名作为第一个节点
    		{Customer:{"id":123,"name":"John"}}，如果配置为true，则Json格式为{"id":123,"name":"John"}，而Gson等Json包会解析格式为后者 -->
    	
    	<!--     
    	<property name="dropRootElement" value="true"/>
    	-->
    	
    	<!-- dropCollectionWrapperElement 默认为false 则当遇到Collection时，Json会在集合中将容器中类名作为一个节点
    		比如{"Customer":{{"id":123,"name":"John"}}}，而设置为false，则JSon格式为{{"id":123,"name":"John"}}-->
    		
    	<!--  	
        <property name="dropCollectionWrapperElement" value="true"/>
        -->
        
        <!-- serializeAsArray属性默认为false，则当遇到Collecion时，格式为{{"id":123,"name":"John"}}，如果设置为true，则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者 -->
        
        <!--  
        <property name="serializeAsArray" value="true"/>  
        -->
        
        <!--    
		<property name="arrayKeys" ref="jsonKeys" />
		<property name="produceMediaTypes" ref="jsonTypes" />
		<property name="consumeMediaTypes" ref="jsonTypes" />
		<property name="ignoreNamespaces" value="true" />
		<property name="ignoreMixedContent" value="true" />
		<property name="supportUnwrapped" value="true" />
		<property name="attributesToElements" value="true" />
        --> 
        
    </bean>
             
 	<jaxrs:server id="bsfRestService" address="/securityRest">
 		<jaxrs:serviceBeans>
 			<ref bean="securityRestWs" />
 		</jaxrs:serviceBeans>
 		<jaxrs:extensionMappings>
 			<entry key="feed" value="application/atom+xml" />
			<entry key="json" value="application/json" />
			<entry key="xml" value="application/xml" />
			<entry key="html" value="text/html" />
 		</jaxrs:extensionMappings>
 		 
 		<jaxrs:providers>
 			<ref bean="jsonProvider"/>
 		</jaxrs:providers>
 		
 		<jaxrs:outInterceptors>
 			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
 		</jaxrs:outInterceptors>
 		<jaxrs:inInterceptors>
 		    <!--   		  
 			<bean class="cn.safetys.cxf.ws.rest.auth.AuthInInterceptor">
 				<property name="enableLocalAuth" value="false"></property> 				  
 				<property name="us" ref="userService"></property>
 			</bean>
 			-->	
  			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
 		</jaxrs:inInterceptors>
 	</jaxrs:server>
 	
</beans>        
